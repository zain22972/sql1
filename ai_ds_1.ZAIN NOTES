# CREATION OF TABLES 
CREATE TABLE employeesZAI
( employee_id number(10) NOT NULL,
  employee_name varchar2(50) NOT NULL,
  city varchar2(50)
);


# SEEING TABLES NAMES FROM ALL TBALES
SELECT table_name
FROM all_tables;


# INSERTING VALUES 

INSERT INTO T1  VALUES (1, 'Alice', 30, 'New York');
INSERT INTO T1  VALUES (2, 'Bob', 25, 'Los Angeles');
INSERT INTO T1  VALUES (3, 'Charlie', 35, 'Chicago');
INSERT INTO T1  VALUES (4, 'Diana', 28, 'Houston');
INSERT INTO T1  VALUES (5, 'Ethan', 40, 'Phoenix');
INSERT INTO T1  VALUES (6, 'Fiona', 22, 'Philadelphia');
INSERT INTO T1  VALUES (7, 'George', 45, 'San Antonio');
INSERT INTO T1  VALUES (8, 'Hannah', 31, 'San Diego');

# SHOW STRUCTURE OR DISPLAY TABLE
DESC T1;


# DELETE RECORDS EITHER ALL OR WITH SOME CONDITION 
DELETE FROM table_name
WHERE condition;
 delete * from T1;

# DROP TABLE DESTROYING THE STRUCTURE OF TABLE 
DROP TABLE employees;

# TRUNCATE ( DELETES RECORDS BUT NOT STRUCUTRE )
TRUNCATE TABLE table_name;

# SEEING TABLES NAMES FROM ALL TBALES
SELECT table_name
FROM all_tables;

# COPY TABLE DATA FROM ANOTHER TABLE WITH DIFFERENT TABLE NAME (AS)
CRTEATE TABHLE T2 AS
SELECT * FROM T1;

# TO SHOW ALL DATA FROM A TABLE (SELECT COMMAND )
SELECT *
FROM table_name;

# TO SHOW TO A SPECIFIC COLUMN
SELECT column_name
FROM table_name;

# TO SHOW MULTIPLE COLUMNS 
SELECT column1, column2
FROM table_name;

# TO SHOW DATA WITH SOEM SPECIFICS ( BOTH CONDITION SHOULD STAISFY)
SELECT column1, column2
FROM table_name
WHERE condition1 AND condition2;

# he OR operator is used when you want to filter results that meet at least one of multiple criteria
SELECT column1, column2
FROM table_name
WHERE condition1 OR condition2;

LAB DAY 2

# CRETAE DEPARTMENT TBALE 
CREATE TABLE departmentszai (
    deptid NUMBER(10) PRIMARY KEY,
    deptname VARCHAR2(50) NOT NULL
);

CREATE TABLE employeesZAI
( emp1 number(10) NOT NULL,
  Fname varchar2(50) NOT NULL,
  LnAME VARCHAR2(50) NOT NULL,
  email varchar2(50) UNIQUE,
  age   NUMBER(10)  CHECK(age>=18 and age<25),
  deptid NUMBER(10)  Default 5, 
  hire   date,
  Salary NUMBER);


# exsisting table adding constraint 
ALTER TABLE employeesZAI
ADD CONSTRAINT chk_hiredate CHECK (hire  > TO_DATE('2020-01-01', 'YYYY-MM-DD'));


# exsisting table adding forighn key
ALTER TABLE employeesZAI
ADD CONSTRAINT fk_deptid FOREIGN KEY (deptid) REFERENCES departmentszai(deptid);







CREATE TABLE employeesZAI
( emp1 number(10) NOT NULL,
  Fname varchar2(50) NOT NULL,
  LnAME VARCHAR2(50) NOT NULL,
  email varchar2(50) UNIQUE,
  age   NUMBER(10)  CHECK(age>=18 and age<25),
  deptid NUMBER(10)  Default 5, 
  hire   date,
  Salary NUMBER);


# exsisting table adding constraint 
ALTER TABLE employeesZAI
ADD CONSTRAINT chk_hiredate CHECK (hire  > TO_DATE('2020-01-01', 'YYYY-MM-DD'));


# exsisting table adding forighn key
ALTER TABLE employeesZAI
ADD CONSTRAINT fk_deptid FOREIGN KEY (deptid) REFERENCES departmentszai(deptid);

 

# CRETAE DEPARTMENT Table
CREATE TABLE departmentszai (
    deptid NUMBER(10) PRIMARY KEY,
    deptname VARCHAR2(50) NOT NULL
);

# ADDING A COLUMN TO EMPLOYEES TABLE 

ALTER TABLE employeesZAI
ADD GENDER  NUMBER(10); 

# ALTER A COLUMN DATATYPE OF YOUR CHOICE 
MODIFY GENDER VARCHAR2(50);

# DELETE A CLOUMN  
ALTER TABLE employeesZAI
DROP COLUMN GENDER;  ( FOR DROPPING A COLUMN A COLUMN WORD SHOULD BE PRESENT)

# CREATE DEPARTMENT TABLE 
CREATE TABLE departmentszai (
    deptid NUMBER(10) PRIMARY KEY,
    deptname VARCHAR2(50) NOT NULL
);

# SHOW THE ROWS IN EMPLOYEE TABLE 
  SELECT * FROM employeesZAI;

# INSERT MULTIPLE RECORDS IN DEPARTMENTS TABLE AND EMPLOYEES TABLE 

INSERT ALL
       INTO departmentszai (deptid,deptname) VALUES (1,'CSE')
       INTO departmentszai (deptid,deptname) VALUES (2,'MECH')
       INTO departmentszai (deptid,deptname) VALUES (3,'CIVIL')
       INTO departmentszai (deptid,deptname) VALUES (4,'AIML')
       INTO departmentszai (deptid,deptname) VALUES (5,'AIDS')
       SELECT * FROM DUAL;

INSERT ALL
    INTO employeesZAI (emp1, Fname, LnAME, email, age, deptid, hire, Salary) VALUES (1, 'John', 'Doe', 'john.doe@example.com', 22, 5, TO_DATE('2022-06-15', 'YYYY-MM-DD'), 50000)
    INTO employeesZAI (emp1, Fname, LnAME, email, age, deptid, hire, Salary) VALUES (2, 'Jane', 'Smith', 'jane.smith@example.com', 24, 3, TO_DATE('2021-09-01', 'YYYY-MM-DD'), 55000)
    INTO employeesZAI (emp1, Fname, LnAME, email, age, deptid, hire, Salary) VALUES (3, 'Emily', 'Johnson', 'emily.johnson@example.com', 23, 2, TO_DATE('2023-01-20', 'YYYY-MM-DD'), 60000)
    INTO employeesZAI (emp1, Fname, LnAME, email, age, deptid, hire, Salary) VALUES (4, 'Michael', 'Brown', 'michael.brown@example.com', 21, 1, TO_DATE('2022-11-05', 'YYYY-MM-DD'), 52000)
    INTO employeesZAI (emp1, Fname, LnAME, email, age, deptid, hire, Salary) VALUES (5, 'Linda', 'Davis', 'linda.davis@example.com', 24, 4, TO_DATE('2021-12-15', 'YYYY-MM-DD'), 58000)
SELECT * FROM dual;

5 rows created.

# WHERE CONDITION
SELECT * FROM employeesZAI
WHERE Salary > 50000;

# EXSISTS CONDITION 

SELECT * FROM employeesZAI e
WHERE EXISTS (
    SELECT 5 FROM departmentszai d
    WHERE d.deptid = e.deptid
);

# IN CONDTION 
SELECT * FROM employeesZAI
WHERE deptid IN 
);



# BETWEEN  CONDTITON 

SELECT * FROM employeesZAI
WHERE salary BETWEEN 50000 AND 60000;

# NULL CONDITION 

SELECT * 
FROM employeesZAI
WHERE emp1 IS NULL;

# LIKE CONDITIOIN 

SELECT * 
FROM employeesZAI
WHERE Fname LIKE 'J%';

# create the alias name for column 

SELECT age as age_25 from employeesZAI
WHERE age > 22;


# ALIAS TABLE 

select * from empployeesZAI e, deptmentszai d where e.deptid == d.deptid  

# WITH CONDITON
SELECT * 
FROM employeesZAI e, departmentsZAI d 
WHERE e.deptid = d.deptid 
AND d.deptid = 1;

# SHOW THE INCREAMENTED SALARY OF AN EMPLOYEE 

SELECT Salary AS E_Salary , Salary + 5000 AS Incremented Salray from employeesZAI; 

 # GROUP BY DEPARTMENT IDS OF EMPLOYESS 

SELECT deptid, 
       COUNT(*) AS employee_count, 
       SUM(salary) AS total_salary,
       AVG(salary) AS average_salary
FROM employeesZAI
GROUP BY deptid;

 # IMPLEMENT A NESTED QUERY 

SELECT Fname 
FROM employeesZAI
WHERE deptid IN (
    SELECT deptid
    FROM departmentsZAI
    WHERE deptName = 'CSE'
);

# UPDATE THE SALARY OF EMPLOYYES BY 1000(INCREASED * 1000)

UPDATE employeesZAI
SET salary = salary * 1000
WHERE deptid IN (
    SELECT deptid
    FROM departmentsZAI
    WHERE deptName = 'CSE'
);


# NATURAL JOIN ( JOINING OF 2 TABLES DATA )
SELECT *
FROM employeesZAI
NATURAL JOIN departmentszai;


# CROSS JOIN ( 
SELECT 
    e.emp1, 
    e.Fname, 
    d.deptid, 
    d.deptname
FROM 
    employeesZAI e
CROSS JOIN 
    departmentszai d;

# SELF JOIN(BEFORE THIS WE NEED MANAGEER COLUMN )

# BEFORE SELF JOIN ( ADDING MANAGER COLUMN)

ALTER TABLE employeesZAI
ADD manager_id NUMBER;

# UPDATE employeesZAI
SET manager_id = 1  
WHERE emp1 IN (2, 3);  

SELECT emp1, Fname, manager_id
FROM employeesZAI;

# SELF JOIN WITH INNER JOIN 

SELECT 
    e.emp1 AS employee_id,
    e.Fname AS employee_name,
    m.manager_id AS manager_id,
    m.Fname AS manager_name
FROM 
    employeesZAI e
INNER JOIN 
    employeesZAI m 
ON e.manager_id = m.emp1;

